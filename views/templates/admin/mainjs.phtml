<?php 
/** @var AdminThirtyBeesMigrate $this */
$tokenPreferences = Tools::getAdminTokenLite('AdminPreferences');
// relative admin dir
$adminDir = trim(str_replace($this->prodRootDir, '', $this->adminDir), DIRECTORY_SEPARATOR);
$installVersion = $this->install_version;
?>
<script type="text/javascript">
  function ucFirst(str) {
    if (str.length > 0) {
      return str[0].toUpperCase() + str.substring(1);
    }
    else {
      return str;
    }
  }

  function cleanInfo() {
    $("#infoStep").html("reset<br/>");
  }

  function updateInfoStep(msg) {
    if (msg) {
      $("#infoStep").append(msg + "<div class=\"clear\"></div>");
      $("#infoStep").prop({ scrollTop: $("#infoStep").prop("scrollHeight") }, 1);
    }
  }

  function addError(arrError) {
    if (typeof(arrError) != "undefined" && arrError.length) {
      $("#errorDuringUpgrade").show();
      for (i = 0; i < arrError.length; i++) {
        $("#infoError").append(arrError[i] + "<div class=\"clear\"></div>");
      }
      // Note : jquery 1.6 make uses of prop() instead of attr()
      $("#infoError").prop({ scrollTop: $("#infoError").prop("scrollHeight") }, 1);
    }
  }

  function addQuickInfo(arrQuickInfo) {
    if (arrQuickInfo) {
      $("#quickInfo").show();
      for (i = 0; i < arrQuickInfo.length; i++) {
        $("#quickInfo").append(arrQuickInfo[i] + "<div class=\"clear\"></div>");
      }
      // Note : jquery 1.6 make uses of prop() instead of attr()
      $("#quickInfo").prop({ scrollTop: $("#quickInfo").prop("scrollHeight") }, 1);
    }
  }

  var manualMode = <?php echo($this->manualMode ? 'true' : 'false'); ?>;
  var _PS_MODE_DEV_ = <?php echo (defined('_PS_DEV_MODE_') && _PS_DEV_MODE_) ? 'true' : 'false'; ?>;
  var PS_AUTOUP_BACKUP = <?php echo ($this->getConfig('PS_AUTOUP_BACKUP')) ? 'true' : 'false' ?>;

  var txtError = [];
  txtError[0] = "<?php echo $this->l('Required field'); ?>";
  txtError[1] = "<?php echo $this->l('Too long!'); ?>";
  txtError[2] = "<?php echo $this->l('Fields are different!'); ?>";
  txtError[3] = "<?php echo $this->l('This email address is wrong!'); ?>";
  txtError[4] = "<?php echo $this->l('Impossible to send the email!'); ?>'";
  txtError[5] = "<?php echo $this->l('Cannot create settings file, if /config/settings.inc.php exists, please give the public write permissions to this file, else please create a file named settings.inc.php in config directory.'); ?>";
  txtError[6] = "<?php echo $this->l('Cannot write settings file, please create a file named settings.inc.php in the "config" directory.'); ?>";
  txtError[7] = "<?php echo $this->l('Impossible to upload the file!'); ?>";
  txtError[8] = "<?php echo $this->l('Data integrity is not valided. Hack attempt?'); ?>";
  txtError[9] = "<?php echo $this->l('Impossible to read the content of a MySQL content file.'); ?>";
  txtError[10] = "<?php echo $this->l('Cannot access a MySQL content file.'); ?>";
  txtError[11] = "<?php echo $this->l('Error while inserting data in the database:'); ?>";
  txtError[12] = "<?php echo $this->l('The password is incorrect (alphanumeric string at least 8 characters).'); ?>";
  txtError[14] = "<?php echo $this->l('A PrestaShop database already exists, please drop it or change the prefix.'); ?>";
  txtError[15] = "<?php echo $this->l('This is not a valid file name.'); ?>";
  txtError[16] = "<?php echo $this->l('This is not a valid image file.'); ?>";
  txtError[17] = "<?php echo $this->l('Error while creating the /config/settings.inc.php file.'); ?>";
  txtError[18] = "<?php echo $this->l('Error:'); ?>";
  txtError[19] = "<?php echo $this->l('This PrestaShop database already exists. Please revalidate your authentication information to the database.'); ?>";
  txtError[22] = "<?php echo $this->l('An error occurred while resizing the picture.'); ?>";
  txtError[23] = "<?php echo $this->l('Database connection is available!'); ?>";
  txtError[24] = "<?php echo $this->l('Database Server is available but database is not found'); ?>";
  txtError[25] = "<?php echo $this->l('Database Server is not found. Please verify the login, password and server fields.'); ?>";
  txtError[26] = "<?php echo $this->l('An error occurred while sending email, please verify your parameters.'); ?>";
  txtError[37] = "<?php echo $this->l('Impossible to write the image /img/logo.jpg. If this image already exists, please delete it.'); ?>";
  txtError[38] = "<?php echo $this->l('The uploaded file exceeds the upload_max_filesize directive in php.ini'); ?>";
  txtError[39] = "<?php echo $this->l('The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form'); ?>";
  txtError[40] = "<?php echo $this->l('The uploaded file was only partially uploaded'); ?>";
  txtError[41] = "<?php echo $this->l('No file was uploaded.'); ?>";
  txtError[42] = "<?php echo $this->l('Missing a temporary folder'); ?>";
  txtError[43] = "<?php echo $this->l('Failed to write file to disk'); ?>";
  txtError[44] = "<?php echo $this->l('File upload stopped by extension'); ?>";
  txtError[45] = "<?php echo $this->l('Cannot convert your database\'s data to utf-8.'); ?>";
  txtError[46] = "<?php echo $this->l('Invalid shop name'); ?>";
  txtError[47] = "<?php echo $this->l('Your firstname contains some invalid characters'); ?>";
  txtError[48] = "<?php echo $this->l('Your lastname contains some invalid characters'); ?>";
  txtError[49] = "<?php echo $this->l('Your database server does not support the utf-8 charset.'); ?>";
  txtError[50] = "<?php echo $this->l('Your MySQL server does not support this engine, please use another one like MyISAM'); ?>";
  txtError[51] = "<?php echo $this->l('The file /img/logo.jpg is not writable, please CHMOD 755 this file or CHMOD 777'); ?>";
  txtError[52] = "<?php echo $this->l('Invalid catalog mode'); ?>";
  txtError[999] = "<?php echo $this->l('No error code available'); ?>";
  //upgrader
  txtError[27] = "<?php echo $this->l('This installer is too old.'); ?>";
  txtError[28] = "<?php echo sprintf($this->l('You already have the %s version.'), $installVersion); ?>";
  txtError[29] = "<?php echo $this->l('There is no older version. Did you delete or rename the config/settings.inc.php file?'); ?>";
  txtError[30] = "<?php echo $this->l('The config/settings.inc.php file was not found. Did you delete or rename this file?'); ?>";
  txtError[31] = "<?php echo $this->l('Cannot find the SQL upgrade files. Please verify that the /install/upgrade/sql folder is not empty.'); ?>";
  txtError[32] = "<?php echo $this->l('No upgrade is possible.'); ?>";
  txtError[33] = "<?php echo $this->l('Error while loading SQL upgrade file.'); ?>";
  txtError[34] = "<?php echo $this->l('Error while inserting content into the database'); ?>";
  txtError[35] = "<?php echo $this->l('Unfortunately,'); ?>";
  txtError[36] = "<?php echo $this->l('SQL errors have occurred.'); ?>";
  txtError[37] = "<?php echo $this->l('The config/defines.inc.php file was not found. Where did you move it?'); ?>";

  var firstTimeParams = <?php echo $this->buildAjaxResult(); ?>;
  firstTimeParams = firstTimeParams.nextParams;
  firstTimeParams.firstTime = "1";

  // js initialization : prepare upgrade and rollback buttons
  $(document).ready(function () {

    $("select[name=channel]").change(function (e) {
      $("select[name=channel]").find("option").each(function () {
        if ($(this).is(":selected")) {
          $("#for-" + $(this).attr("id")).show();
        } else {
          $("#for-" + $(this).attr("id")).hide();
        }
      });

      refreshChannelInfos();
    });

    function refreshChannelInfos() {
      val = $("select[name=channel]").find("option:selected").val();
      $.ajax({
        type: "POST",
        url: "<?php echo __PS_BASE_URI__.$adminDir.'/autoupgrade/ajax-upgradetab.php'; ?>",
        async: true,
        data: {
          dir: "<?php echo $adminDir; ?>",
          token: "<?php echo $this->token; ?>",
          autoupgradeDir: "<?php echo $this->install_autoupgrade_dir; ?>",
          tab: "AdminThirtyBeesMigrate",
          action: "getChannelInfo",
          ajaxMode: "1",
          params: { channel: val }
        },
        success: function (res, textStatus, jqXHR) {
          if (isJsonString(res)) {
            res = $.parseJSON(res);
          } else {
            res = { nextParams: { status: "error" } };
          }

          answer = res.nextParams.result;
          if (typeof(answer) != "undefined") {
            $("#channel-infos").replaceWith(answer.div);
          }
          if (typeof(answer) != "undefined" && answer.available) {
            $("#channel-infos .all-infos").show();
          }
          else if (typeof(answer) != "undefined") {
            $("#channel-infos").html(answer.div);
            $("#channel-infos .all-infos").hide();
          }
        },
        error: function (res, textStatus, jqXHR) {
          if (textStatus == "timeout" && action == "download") {
            updateInfoStep("<?php echo $this->l('Your server cannot download the file. Please upload it first by ftp in your admin/autoupgrade directory', 'AdminThirtyBeesMigrate', true); ?>");
          }
          else {
            // technical error : no translation needed
            $("#checkPrestaShopFilesVersion").html("<img src=\"../img/admin/warning.gif\" /> Error Unable to check md5 files");
          }
        }
      })
    }

    $(document).ready(function () {
      $("div[id|=for]").hide();
      $("select[name=channel]").change();

      $("#upgradeNow17").click(function (e) {
        if (!isAllConditionOk()) {
          e.preventDefault();
          alert("<?php echo $this->l('You need to check all condition', 'AdminThirtyBeesMigrate', true); ?>")
        } else {
          prepareNextButton("#upgradeNow17", firstTimeParams);
          $(this).click();
        }
      });

    });

    // the following prevents to leave the page at the innappropriate time
    $.xhrPool = [];
    $.xhrPool.abortAll = function () {
      $.each(this, function (jqXHR) {
        if (jqXHR && (jqXHR.readystate != 4)) {
          jqXHR.abort();
        }
      });
    };
    $(".upgradestep").click(function (e) {
      e.preventDefault();
      // $.scrollTo("#options")
    });

    // set timeout to 120 minutes (before aborting an ajax request)
    $.ajaxSetup({ timeout: 7200000 });

    // prepare available button here, without params ?
    prepareNextButton("#upgradeNow", firstTimeParams);

    /**
     * reset rollbackParams js array (used to init rollback button)
     */
    $("select[name=restoreName]").change(function () {
      $(this).next().remove();
      // show delete button if the value is not 0
      if ($(this).val() != 0) {
        $(this).after("<a class=\"button confirmBeforeDelete\" href=\"index.php?tab=AdminThirtyBeesMigrate&token=<?php echo $this->token; ?>&amp;deletebackup&amp;name="+$(this).val()+"\"> <img src=\"../img/admin/disabled.gif\" /><?php echo $this->l('Delete'); ?></a>");
        $(this).next().click(function (e) {
          if (!confirm("<?php echo $this->l('Are you sure you want to delete this backup?', 'AdminThirtyBeesMigrate', true, false); ?>")) {
            e.preventDefault();
          }
        });
      }

      if ($("select[name=restoreName]").val() != 0) {
        $("#rollback").removeAttr("disabled");
        rollbackParams = jQuery.extend(true, {}, firstTimeParams);

        delete rollbackParams.backupName;
        delete rollbackParams.backupFilesFilename;
        delete rollbackParams.backupDbFilename;
        delete rollbackParams.restoreFilesFilename;
        delete rollbackParams.restoreDbFilenames;

        // init new name to backup
        rollbackParams.restoreName = $("select[name=restoreName]").val();
        prepareNextButton("#rollback", rollbackParams);
        // Note : theses buttons have been removed.
        // they will be available in a future release (when DEV_MODE and MANUAL_MODE enabled)
        // prepareNextButton("#restoreDb", rollbackParams);
        // prepareNextButton("#restoreFiles", rollbackParams);
      }
      else {
        $("#rollback").attr("disabled", "disabled");
      }
    });

  });

  function showConfigResult(msg, type) {
    if (type == null) {
      type = "conf";
    }
    $("#configResult").html("<div class=\"" + type + "\">" + msg + "</div>").show();
    if (type == "conf") {
      $("#configResult").delay(3000).fadeOut("slow", function () {
        location.reload();
      });
    }
  }

  // reuse previousParams, and handle xml returns to calculate next step
  // (and the correct next param array)
  // a case has to be defined for each requests that returns xml


  function afterUpdateConfig(res) {
    params = res.nextParams
    config = params.config
    oldChannel = $("select[name=channel] option.current");
    if (config.channel != oldChannel.val()) {
      newChannel = $("select[name=channel] option[value=" + config.channel + "]");
      oldChannel.removeClass("current");
      oldChannel.html(oldChannel.html().substr(2));
      newChannel.addClass("current");
      newChannel.html("* " + newChannel.html());
    }
    if (res.error == 1) {
      showConfigResult(res.next_desc, "error");
    } else {
      showConfigResult(res.next_desc);
    }
    $("#upgradeNow").unbind();
    $("#upgradeNow").replaceWith("<a class=\"button-autoupgrade\" href=\"<?php echo $this->currentIndex; ?>&token=<?php echo $this->token; ?>\" ><?php echo $this->l('Click to refresh the page and use the new configuration', 'AdminThirtyBeesMigrate', true); ?></a>");
  }
  function startProcess(type) {

    // hide useless divs, show activity log
    $("#informationBlock,#comparisonBlock,#currentConfigurationBlock,#backupOptionsBlock,#upgradeOptionsBlock,#upgradeButtonBlock").slideUp("fast");
    $(".autoupgradeSteps a").addClass("button");
    $("#hideStep17, #hideStep17basic, #activityLogBlock").show();
    $("#hideStep17-2").hide();

    $(window).bind("beforeunload", function (e) {
      if (confirm("<?php echo $this->l('An update is currently in progress... Click "{OK}" to abort.', 'AdminTab', true, false); ?>")) {
        $.xhrPool.abortAll();
        $(window).unbind("beforeunload");
        return true;
      } else {
        if (type == "upgrade") {
          e.returnValue = false;
          e.cancelBubble = true;
          if (e.stopPropagation) {
            e.stopPropagation();
          }
          if (e.preventDefault) {
            e.preventDefault();
          }
        }
      }
    });
  }

  function isAllConditionOk() {
    var isOk = true;

    $("input[name=\"goToUpgrade[]\"]").each(function () {
      if (!($(this).is(":checked"))) {
        isOk = false;
      }
    });

    return isOk;
  }

  function afterUpgradeNow(res) {
    startProcess("upgrade");
    $("#upgradeNow").unbind();
    $("#upgradeNow").replaceWith("<span id=\"upgradeNow\" class=\"button-autoupgrade\"><?php echo $this->l('Upgrading thirty bees', 'AdminThirtyBeesMigrate', true); ?>...</span>");
  }

  function afterUpgradeNow17(res) {
    startProcess("upgrade");
    $("#upgradeNow17").unbind();
    $("#upgradeNow17").replaceWith("<span id=\"upgradeNow17\" class=\"button-autoupgrade\"><?php echo $this->l('Upgrading PrestaShop', 'AdminThirtyBeesMigrate', true); ?>...</span>");
  }

  function afterUpgradeComplete(res) {
    params = res.nextParams
    $("#pleaseWait").hide();
    if (params.warning_exists == "false") {
      $("#upgradeResultCheck")
        .addClass("conf")
        .removeClass("fail")
        .html("<p><?php echo $this->l('Upgrade complete'); ?></p>")
        .show();
      $("#infoStep").html("<h3><?php echo $this->l('Upgrade Complete!', 'AdminThirtyBeesMigrate', true); ?></h3>");
    } else {
      params = res.nextParams;
      $("#pleaseWait").hide();
      $("#upgradeResultCheck")
        .addClass("fail")
        .removeClass("ok")
        .html("<p><?php echo $this->l('Upgrade complete, but warning notifications has been found.'); ?>'</p>")
        .show("slow");
      $("#infoStep").html("<h3><?php echo $this->l('Upgrade complete, but warning notifications has been found.', 'AdminThirtyBeesMigrate', true); ?></h3>");
    }

    todo_list = [
      "<?php echo $this->l('Cookies have changed, you will need to log in again once you refreshed the page', 'AdminThirtyBeesMigrate', true); ?>",
      "<?php echo $this->l('Javascript and CSS files have changed, please clear your browser cache with CTRL-F5', 'AdminThirtyBeesMigrate', true); ?>",
      "<?php echo $this->l('Please check that your front-office theme is functional (try to create an account, place an order...)', 'AdminThirtyBeesMigrate', true); ?>",
      "<?php echo $this->l('Product images do not appear in the front-office? Try regenerating the thumbnails in Preferences > Images', 'AdminThirtyBeesMigrate', true); ?>",
      "<?php echo $this->l('Do not forget to reactivate your shop once you have checked everything!', 'AdminThirtyBeesMigrate', true); ?>"
    ];

    todo_ul = "<ul>";
    $("#upgradeResultToDoList")
      .addClass("hint clear")
      .html("<h3><?php echo $this->l('ToDo list:'); ?></h3>");
    for (var i in todo_list) {
      todo_ul += "<li>" + todo_list[i] + "</li>";
    }
    todo_ul += "</ul>";
    $("#upgradeResultToDoList").append(todo_ul);
    $("#upgradeResultToDoList").show();

    $(window).unbind("beforeunload");
  }

  function afterError(res) {
    params = res.nextParams;
    if (params.next == "") {
      $(window).unbind("beforeunload");
    }
    $("#pleaseWait").hide();

    addQuickInfo(["unbind :) "]);
  }

  function afterRollback(res) {
    startProcess("rollback");
  }

  function afterRollbackComplete(res) {
    params = res.nextParams
    $("#pleaseWait").hide();
    $("#upgradeResultCheck")
      .addClass("ok")
      .removeClass("fail")
      .html("<p><?php echo $this->l('Restoration complete.'); ?></p>")
      .show("slow");
    updateInfoStep("<h3><?php echo $this->l('Restoration complete.'); ?></h3>");
    $(window).unbind();
  }


  function afterRestoreDb(params) {
    // $("#restoreBackupContainer").hide();
  }

  function afterRestoreFiles(params) {
    // $("#restoreFilesContainer").hide();
  }

  function afterBackupFiles(res) {
    params = res.nextParams;
    // if (params.stepDone)
  }

  /**
   * afterBackupDb display the button
   *
   */
  function afterBackupDb(res) {
    params = res.nextParams;
    if (res.stepDone && typeof(PS_AUTOUP_BACKUP) != "undefined" && PS_AUTOUP_BACKUP == true) {
      $("#restoreBackupContainer").show();
      $("select[name=restoreName]").children("options").removeAttr("selected");
      $("select[name=restoreName]")
        .append("<option selected=\"selected\" value=\"" + params.backupName + "\">" + params.backupName + "</option>")
      $("select[name=restoreName]").change();
    }
  }


  function call_function(func) {
    this[func].apply(this, Array.prototype.slice.call(arguments, 1));
  }

  function doAjaxRequest(action, nextParams) {
    if (typeof(_PS_MODE_DEV_) != "undefined" && _PS_MODE_DEV_ == true) {
      addQuickInfo(["[DEV] ajax request : " + action]);
    }
    $("#pleaseWait").show();
    req = $.ajax({
      type: "POST",
      url: "<?php echo __PS_BASE_URI__.$adminDir.'/autoupgrade/ajax-upgradetab.php'; ?>",
      async: true,
      data: {
        dir: "<?php echo $adminDir; ?>",
        ajaxMode: "1",
        token: "<?php echo $this->token; ?>",
        autoupgradeDir: "<?php echo $this->install_autoupgrade_dir; ?>",
        tab: "AdminThirtyBeesMigrate",
        action: action,
        params: nextParams
      },
      beforeSend: function (jqXHR) {
        $.xhrPool.push(jqXHR);
      },
      complete: function (jqXHR) {
        // just remove the item to the "abort list"
        $.xhrPool.pop();
        // $(window).unbind("beforeunload");
      },
      success: function (res, textStatus, jqXHR) {
        $("#pleaseWait").hide();
        try {
          res = $.parseJSON(res);
        }
        catch (e) {
          res = { status: "error", nextParams: nextParams };
          alert("<?php echo $this->l('Javascript error (parseJSON) detected for action ', __CLASS__, true, false); ?>\"" + action + "\"<?php echo $this->l('Starting restoration...', __CLASS__, true, false); ?>");
        }
        addQuickInfo(res.nextQuickInfo);
        addError(res.nextErrors);
        updateInfoStep(res.next_desc);
        currentParams = res.nextParams;
        if (res.status == "ok") {
          $("#" + action).addClass("done");
          if (res.stepDone) {
            $("#" + action).addClass("stepok");
          }
          // if a function "after[action name]" exists, it should be called now.
          // This is used for enabling restore buttons for example
          funcName = "after" + ucFirst(action);
          if (typeof funcName == "string" && eval("typeof " + funcName) == "function") {
            call_function(funcName, res);
          }

          handleSuccess(res, action);
        }
        else {
          // display progression
          $("#" + action).addClass("done");
          $("#" + action).addClass("steperror");
          if (action != "rollback"
            && action != "rollbackComplete"
            && action != "restoreFiles"
            && action != "restoreDb"
            && action != "rollback"
            && action != "noRollbackFound"
          ) {
            handleError(res, action);
          } else {
            alert("<?php echo $this->l('Error detected during', __CLASS__, true, false); ?> [" + action + "]");
          }
        }
      },
      error: function (jqXHR, textStatus, errorThrown) {
        $("#pleaseWait").hide();
        if (textStatus == "timeout") {
          if (action == "download") {
            updateInfoStep("<?php echo addslashes($this->l('Your server cannot download the file. Please upload it first by ftp in your admin/autoupgrade directory')); ?>");
          } else {
            updateInfoStep("[Server Error] Timeout:<?php echo addslashes($this->l('The request exceeded the max_time_limit. Please change your server configuration.')); ?>");
          }
        }
        else {
          updateInfoStep("[Ajax / Server Error for action " + action + "] textStatus: \"" + textStatus + " \" errorThrown:\"" + errorThrown + " \" jqXHR: \" " + jqXHR.responseText + "\"");
        }
      }
    });
    return req;
  }
  ;

  /**
   * prepareNextButton make the button button_selector available, and update the nextParams values
   *
   * @param button_selector $button_selector
   * @param nextParams $nextParams
   * @return void
   */
  function prepareNextButton(button_selector, nextParams) {
    $(button_selector).unbind();
    $(button_selector).click(function (e) {
      e.preventDefault();
      $("#currentlyProcessing").show();

      action = button_selector.substr(1);
      res = doAjaxRequest(action, nextParams);
    });
  }

  /**
   * handleSuccess
   * res = {error:, next:, next_desc:, nextParams:, nextQuickInfo:,status:"ok"}
   * @param res $res
   * @return void
   */
  function handleSuccess(res, action) {
    if (res.next != "") {

      $("#" + res.next).addClass("nextStep");
      if (manualMode && (action != "rollback"
        && action != "rollbackComplete"
        && action != "restoreFiles"
        && action != "restoreDb"
        && action != "rollback"
        && action != "noRollbackFound")) {
        prepareNextButton("#" + res.next, res.nextParams);
        alert("<?php echo sprintf($this->l('Manually go to %s button'), __CLASS__, true, false); ?>" + res.next);
      }
      else {
        // if next is rollback, prepare nextParams with rollbackDbFilename and rollbackFilesFilename
        if (res.next == "rollback") {
          res.nextParams.restoreName = ""
        }
        doAjaxRequest(res.next, res.nextParams);
        // 2) remove all step link (or show them only in dev mode)
        // 3) when steps link displayed, they should change color when passed if they are visible
      }
    }
    else {
      // Way To Go, end of upgrade process
      addQuickInfo(["<?php echo $this->l('End of process'); ?>"]);
    }
  }

  // res = {nextParams, next_desc}
  function handleError(res, action) {
    // display error message in the main process thing
    // In case the rollback button has been deactivated, just re-enable it
    $("#rollback").removeAttr("disabled");
    // auto rollback only if current action is upgradeFiles or upgradeDb
    if (action == "upgradeFiles" || action == "upgradeDb" || action == "upgradeModules") {
      $(".button-autoupgrade").html("<?php echo $this->l('Operation canceled. Checking for restoration...'); ?>");
      res.nextParams.restoreName = res.nextParams.backupName;
      if (confirm("<?php echo $this->l('Do you want to restore'); ?> " + "<?php echo $this->backupName; ?>" + " ?")) {
        doAjaxRequest("rollback", res.nextParams);
      }
    }
    else {
      $(".button-autoupgrade").html("<?php echo $this->l('Operation canceled. An error happened.'); ?>");
      $(window).unbind();
    }
  }

  // ajax to check md5 files
  function addModifiedFileList(title, fileList, css_class, container)
  {
    subList = $("<ul class=\"changedFileList " + css_class + "\"></ul>");

    $(fileList).each(function (k, v) {
      $(subList).append("<li>" + v + "</li>");
    });
    $(container).append("<h3><a class=\"toggleSublist\" href=\"#\" >" + title + "</a> (" + fileList.length + ")</h3>");
    $(container).append(subList);
    $(container).append("<br/>");

  }

  var upgradeTabFileExists = <?php echo (file_exists($this->autoupgradePath.DIRECTORY_SEPARATOR.'ajax-upgradetab.php')) ? 'true' : 'false'; ?>;

  if (!upgradeTabFileExists) {
    $(document).ready(function () {
      $("#checkPrestaShopFilesVersion").html("<img src=\"../img/admin/warning.gif\" /> [TECHNICAL ERROR] ajax-upgradetab.php <?php echo $this->l('is missing. please reinstall the module'); ?>");
    });
  } else {
    function isJsonString(str) {
      try {
        typeof(str) != "undefined" && JSON.parse(str);
      } catch (e) {
        return false;
      }
      return true;
    }

    $(document).ready(function () {
      $.ajax({
        type: "POST",
        url: "<?php echo __PS_BASE_URI__.$adminDir.'/autoupgrade/ajax-upgradetab.php' ?>",
        async: true,
        data: {
          dir: "<?php echo $adminDir; ?>",
          token: "<?php echo $this->token; ?>",
          autoupgradeDir: "<?php echo $this->install_autoupgrade_dir; ?>",
          tab: "<?php echo get_class($this); ?>",
          action: "checkFilesVersion",
          ajaxMode: "1",
          params: {}
        },
        success: function (res, textStatus, jqXHR) {
          if (isJsonString(res)) {
            res = $.parseJSON(res);
          } else {
            res = { nextParams: { status: "error" } };
          }
          answer = res.nextParams;
          $("#checkPrestaShopFilesVersion").html("<span> " + answer.msg + " </span> ");
          if ((answer.status == "error") || (typeof(answer.result) == "undefined")) {
            $("#checkPrestaShopFilesVersion").prepend("<img src=\"../img/admin/warning.gif\" /> ");
          } else {
            $("#checkPrestaShopFilesVersion").prepend("<img src=\"../img/admin/warning.gif\" /> ");
            $("#checkPrestaShopFilesVersion").append("<a id=\"toggleChangedList\" class=\"button\" href=\"\"><?php echo $this->l('See or hide the list'); ?></a><br/>");
            $("#checkPrestaShopFilesVersion").append("<div id=\"changedList\" style=\"display:none \"><br/>");
            if (answer.result.core.length) {
              addModifiedFileList("<?php echo $this->l('Core file(s)'); ?>", answer.result.core, "changedImportant", "#changedList");
            }
            if (answer.result.mail.length) {
              addModifiedFileList("'<?php echo $this->l('Mail file(s)'); ?>", answer.result.mail, "changedNotice", "#changedList");
            }
            if (answer.result.translation.length) {
              addModifiedFileList("<?php echo $this->l('Translation file(s)'); ?>", answer.result.translation, "changedNotice", "#changedList");
            }

            $("#toggleChangedList").bind("click", function (e) {
              e.preventDefault();
              $("#changedList").toggle();
            });
            $(".toggleSublist").die().live("click", function (e) {
              e.preventDefault();
              $(this).parent().next().toggle();
            });
          }
        }
        ,
        error: function (res, textStatus, jqXHR) {
          if (textStatus == "timeout" && action == "download") {
            updateInfoStep("<?php echo $this->l('Your server cannot download the file. Please upload it to your FTP server, and put it in your /[admin]/autoupgrade directory.'); ?>");
          }
          else {
            // technical error : no translation needed
            $("#checkPrestaShopFilesVersion").html("<img src=\"../img/admin/warning.gif\" /> Error: Unable to check md5 files");
          }
        }
      });
      $.ajax({
        type: "POST",
        url: "<?php echo __PS_BASE_URI__.$adminDir.'/autoupgrade/ajax-upgradetab.php'; ?>",
        async: true,
        data: {
          dir: "<?php echo $adminDir; ?>",
          token: "<?php echo $this->token; ?>",
          autoupgradeDir: "<?php echo $this->install_autoupgrade_dir; ?>",
          tab: "<?php echo get_class($this); ?>",
          action: "compareReleases",
          ajaxMode: "1",
          params: {}
        },
        success: function (res, textStatus, jqXHR) {
          if (isJsonString(res)) {
            res = $.parseJSON(res);
          } else {
            res = { nextParams: { status: "error" } };
          }
          answer = res.nextParams;
          $("#checkPrestaShopModifiedFiles").html("<span> " + answer.msg + " </span> ");
          if ((answer.status == "error") || (typeof(answer.result) == "undefined")) {
            $("#checkPrestaShopModifiedFiles").prepend("<img src=\"../img/admin/warning.gif\" /> ");
          } else {
            $("#checkPrestaShopModifiedFiles").prepend("<img src=\"../img/admin/warning.gif\" /> ");
            $("#checkPrestaShopModifiedFiles").append("<a id=\"toggleDiffList\" class=\"button\" href=\"\"><?php echo $this->l('See or hide the list'); ?></a><br/>");
            $("#checkPrestaShopModifiedFiles").append("<div id=\"diffList\" style=\"display:none \"><br/>");
            if (answer.result.deleted.length) {
              addModifiedFileList("<?php echo $this->l('Theses files will be deleted'); ?>", answer.result.deleted, "diffImportant", "#diffList");
            }
            if (answer.result.modified.length) {
              addModifiedFileList("<?php echo $this->l('Theses files will be modified'); ?>", answer.result.modified, "diffImportant", "#diffList");
            }

            $("#toggleDiffList").bind("click", function (e) {
              e.preventDefault();
              $("#diffList").toggle();
            });
            $(".toggleSublist").die().live("click", function (e) {
              e.preventDefault();
              // this=a, parent=h3, next=ul
              $(this).parent().next().toggle();
            });
          }
        },
        error: function (res, textStatus, jqXHR) {
          if (textStatus == "timeout" && action == "download") {
            updateInfoStep("<?php echo $this->l('Your server cannot download the file. Please upload it first by ftp in your admin/autoupgrade directory'); ?>");
          }
          else {
            // technical error : no translation needed
            $("#checkPrestaShopFilesVersion").html("<img src=\"../img/admin/warning.gif\" /> Error: Unable to check md5 files");
          }
        }
      })
    });
  }

  // advanced/normal mode
  $("input[name=btn_adv]").click(function (e) {
    if ($("#advanced:visible").length) {
      switch_to_normal();
    } else {
      switch_to_advanced();
    }
  });

  function switch_to_advanced() {
    $("input[name=btn_adv]").val("<?php echo $this->l('Less options', 'AdminTab', true, false); ?>");
    $("#advanced").show();
  }

  function switch_to_normal() {
    $("input[name=btn_adv]").val("<?php echo $this->l('More options (Expert mode)', 'AdminTab', true, false); ?>");
    $("#advanced").hide();
  }

  $(document).ready(function () {
    <?php echo ($this->getConfig('channel') === 'major' ? 'switch_to_normal();' : 'switch_to_advanced();'); ?>
    $("input[name|=submitConf]").bind("click", function (e) {
      params = {};
      newChannel = $("select[name=channel] option:selected").val();
      oldChannel = $("select[name=channel] option.current").val();
      oldChannel = "";
      if (oldChannel != newChannel) {
        if (newChannel == "major"
          || newChannel == "minor"
          || newChannel == "rc"
          || newChannel == "beta"
          || newChannel == "alpha") {
          params.channel = newChannel;
        }

        if (newChannel == "private") {
          if (($("input[name=private_release_link]").val() == "") || ($("input[name=private_release_md5]").val() == "")) {
            showConfigResult("<?php echo $this->l('Link and MD5 hash cannot be empty'); ?>", "error");
            return false;
          }
          params.channel = "private";
          params.private_release_link = $("input[name=private_release_link]").val();
          params.private_release_md5 = $("input[name=private_release_md5]").val();
          if ($("input[name=private_allow_major]").is(":checked")) {
            params.private_allow_major = 1;
          } else {
            params.private_allow_major = 0;
          }
        }
        if (newChannel == "archive") {
          archive_prestashop = $("select[name=archive_prestashop] option:selected").val();
          archive_num = $("input[name=archive_num]").val();
          if (archive_num == "") {
            showConfigResult("<?php echo $this->l('You need to enter the version number associated with the archive.'); ?>", "error");
            return false;
          }
          if (archive_prestashop == "") {
            showConfigResult("<?php echo $this->l('No archive has been selected.'); ?>", "error");
            return false;
          }
          params.channel = "archive";
          params.archive_prestashop = archive_prestashop;
          params.archive_num = archive_num;
        }
        if (newChannel == "directory") {
          params.channel = "directory";
          params.directory_prestashop = $("select[name=directory_prestashop] option:selected").val();
          directory_num = $("input[name=directory_num]").val();
          if (directory_num == "" || directory_num.indexOf(".") == -1) {
            showConfigResult("<?php echo $this->l('You need to enter the version number associated with the directory.'); ?>", "error");
            return false;
          }
          params.directory_num = $("input[name=directory_num]").val();
        }
      }
      // note: skipBackup is currently not used
      if ($(this).attr("name") == "submitConf-skipBackup") {
        skipBackup = $("input[name=submitConf-skipBackup]:checked").length;
        if (skipBackup == 0 || confirm("<?php echo $this->l('Please confirm that you want to skip the backup.'); ?>")) {
          params.skip_backup = $("input[name=submitConf-skipBackup]:checked").length;
        } else {
          $("input[name=submitConf-skipBackup]:checked").removeAttr("checked");
          return false;
        }
      }

      // note: preserveFiles is currently not used
      if ($(this).attr("name") == "submitConf-preserveFiles") {
        preserveFiles = $("input[name=submitConf-preserveFiles]:checked").length;
        if (confirm("<?php echo $this->l('Please confirm that you want to preserve file options.'); ?>")) {
          params.preserve_files = $("input[name=submitConf-preserveFiles]:checked").length;
        } else {
          $("input[name=submitConf-skipBackup]:checked").removeAttr("checked");
          return false;
        }
      }
      res = doAjaxRequest("updateConfig", params);
    });
  });
</script>
